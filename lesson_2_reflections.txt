1. What happens when you initialize a repository? Why do you need to do it?

2. How is staging area different from the working directory and the repository?
What value do you think it offers?

3. How can you use the staging area to make sure you have one commit per logical change?
Because we can control which files we are commiting by previous selecting 
them to go the staging area.

4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
When you want to experiment new things like developing new features you 
don't know if are going to work you can create a branch. It acts like a
copy of the source code you are working. It won't mess the master branch
where the working code is kept. This is also helpful when you have 2 teams
and one is responsible for code maintenance and product support and the 
other is working on developing new features.

5. How do the diagrams help you visualize the branch structure?
They are a easy way to understand the history of the commits that make the
branch. This makes it easy to understand where we are on the entire branch
or branches structure.

6. What is the result of merging two branches together? Why do we represent
it in the diagram the way we do?
You'll end up with only 1 branch that has the entire history of commits of
both the original branches. All this commits can be reached through this
merged branch.

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Automatic merging can lead to bad choices. Git may not understand the intent
of the developers that create the changes and may choose a wrong version as
the one to stay. Doing all merges manually is bothersome.
